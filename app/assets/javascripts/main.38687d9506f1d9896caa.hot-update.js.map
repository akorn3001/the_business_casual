{"version":3,"sources":["webpack:///./frontend/redux/util/route_util.js"],"names":["Auth","Component","component","path","loggedIn","currentUser","props","admin","Admin","mapStateToProps","Boolean","state","session","AuthRoute","AdminRoute"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAGA;;AAEA,IAAMA,OAAO,SAAPA,IAAO;AAAA,MAAcC,SAAd,QAAGC,SAAH;AAAA,MAAyBC,IAAzB,QAAyBA,IAAzB;AAAA,MAA+BC,QAA/B,QAA+BA,QAA/B;AAAA,MAAyCC,WAAzC,QAAyCA,WAAzC;AAAA,SACX,8BAAC,qBAAD,IAAO,MAAMF,IAAb,EAAmB,QAAQ,gBAACG,KAAD,EAAW;AAClC,UAAI,CAACF,QAAL,EAAe;AACb,eAAS,8BAAC,SAAD,EAAeE,KAAf,CAAT;AACD,OAFD,MAEO,IAAIF,YAAYC,YAAYE,KAA5B,EAAmC;AACxC,eAAS,8BAAC,wBAAD,IAAU,IAAI,UAAd,GAAT;AACD,OAFM,MAEA;AACL,eAAS,8BAAC,wBAAD,IAAU,IAAI,WAAd,GAAT;AACD;AACJ,KARD,GADW;AAAA,CAAb;;AAYA;;AAEA,IAAMC,QAAQ,SAARA,KAAQ;AAAA,MAAcP,SAAd,SAAGC,SAAH;AAAA,MAAyBC,IAAzB,SAAyBA,IAAzB;AAAA,MAA+BC,QAA/B,SAA+BA,QAA/B;AAAA,MAAyCC,WAAzC,SAAyCA,WAAzC;AAAA,SACZ,8BAAC,qBAAD,IAAO,MAAMF,IAAb,EAAmB,QAAQ,gBAACG,KAAD,EAAW;AAClC,UAAIF,YAAYC,YAAYE,KAA5B,EAAmC;AACjC,eAAO,8BAAC,SAAD,EAAeD,KAAf,CAAP;AACD,OAFD,MAEO;AACL,eAAO,8BAAC,wBAAD,IAAU,IAAI,QAAd,GAAP;AACD;AACJ,KAND,GADY;AAAA,CAAd;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAMG,kBAAkB,SAAlBA,eAAkB,QAAS;AAC/B,SAAO,EAACL,UAAUM,QAAQC,MAAMC,OAAN,CAAcP,WAAtB,CAAX;AACCA,iBAAaM,MAAMC,OAAN,CAAcP,WAD5B,EAAP;AAED,CAHD;;AAKA;AACO,IAAMQ,gCAAY,gCAAW,yBAAQJ,eAAR,EAAyB,IAAzB,EAA+BT,IAA/B,CAAX,CAAlB;;AAEP;AACO,IAAMc,kCAAa,gCAAW,yBAAQL,eAAR,EAAyB,IAAzB,EAA+BD,KAA/B,CAAX,CAAnB;;AAEP;AACA,uF","file":"main.38687d9506f1d9896caa.hot-update.js","sourcesContent":["import React from 'react';\nimport { Redirect, Route, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n\n// renders component if logged out, otherwise redirects to the root url\n\nconst Auth = ({ component: Component, path, loggedIn, currentUser }) => (\n  <Route path={path} render={(props) => {\n      if (!loggedIn) {\n        return ( <Component {...props}/> )\n      } else if (loggedIn && currentUser.admin) {\n        return ( <Redirect to={\"/profile\"} /> )\n      } else {\n        return ( <Redirect to={\"/articles\"} />)\n      }\n  }}/>\n);\n\n// renders component if loggedIn AND admin user\n\nconst Admin = ({ component: Component, path, loggedIn, currentUser }) => (\n  <Route path={path} render={(props) => {\n      if (loggedIn && currentUser.admin) {\n        return <Component {...props} />\n      } else {\n        return <Redirect to={\"/login\"} />\n      }\n  }} />\n);\n\n// renders component if logged in, otherwise redirects to the login page\n// const Protected = ({ component: Component, path, loggedIn }) => (\n//   <Route path={path} render={(props) => (\n//      loggedIn ? (\n//       <Component {...props}/>\n//     ) : (\n//       <Redirect to=\"/login\"/>\n//     )\n//   )}/>\n// );\n\n// access the Redux state to check if the user is logged in\nconst mapStateToProps = state => {\n  return {loggedIn: Boolean(state.session.currentUser),\n          currentUser: state.session.currentUser};\n}\n\n// connect Auth to the redux state\nexport const AuthRoute = withRouter(connect(mapStateToProps, null)(Auth));\n\n// connect Admin to the redux state\nexport const AdminRoute = withRouter(connect(mapStateToProps, null)(Admin));\n\n// connect Protected to the redux state\n// export const ProtectedRoute = withRouter(connect(mapStateToProps, null)(Protected));\n"],"sourceRoot":""}